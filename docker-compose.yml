version: '3.8'

services:
    app:
        build:
            context: .
            dockerfile: docker/php/Dockerfile
            args:
                USER_ID: ${UID:-1000}
                GROUP_ID: ${GID:-1000}
                APP_ENV: ${APP_ENV:-prod}
        container_name: "${PROJECT_NAME}-app"
        restart: unless-stopped
        user: ${UID:-1000}:${GID:-1000}
        environment:
            APP_ENV: ${APP_ENV}
            APP_DEBUG: ${APP_DEBUG}
            DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${PROJECT_NAME}-postgres:${POSTGRES_PORT}/${POSTGRES_DB}
            REDIS_URL: redis://${PROJECT_NAME}-redis:${REDIS_PORT}
            XDEBUG_MODE: ${XDEBUG_MODE:-off}
            XDEBUG_TRIGGER: ${XDEBUG_TRIGGER:-TRIGGER}
            XDEBUG_CONFIG: "client_host=${XDEBUG_HOST:-host.docker.internal} discover_client_host=1 log=/var/log/xdebug/xdebug.log"
            PHP_IDE_CONFIG: "serverName=Docker"
            TZ: ${TZ:-UTC}
        volumes:
            - ./:/var/www/html
        entrypoint: ["/bin/bash", "-c"]
        command: |
            composer install --no-interaction --prefer-dist
            php-fpm
        depends_on:
            - db
            - redis
        networks:
            - app-network

    nginx:
        image: nginx:1.25-alpine
        container_name: "${PROJECT_NAME}-nginx"
        restart: unless-stopped
        ports:
            - "${HTTP_PORT}:80"
            - "${HTTPS_PORT}:443"
        volumes:
            - ./docker/nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
            - ./public:/var/www/html/public
        depends_on:
            - app
        networks:
            - app-network

    db:
        image: postgres:16
        container_name: "${PROJECT_NAME}-postgres"
        restart: unless-stopped
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_ROOT_PASSWORD: ${POSTGRES_ROOT_PASSWORD}
            TZ: ${TZ:-UTC}
        ports:
            - "${POSTGRES_PORT}:5432"
        volumes:
            - pgdata:/var/lib/postgresql/data
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
            interval: 5s
            timeout: 5s
            retries: 5
        networks:
            - app-network

    redis:
        image: redis:7-alpine
        container_name: "${PROJECT_NAME}-redis"
        restart: unless-stopped
        environment:
            REDIS_PASSWORD: ${REDIS_PASSWORD}
            TZ: ${TZ}
        ports:
            - "${REDIS_PORT}:6379"
        networks:
            - app-network

volumes:
    pgdata:

networks:
    app-network:
        driver: bridge
